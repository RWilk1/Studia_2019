---
title: "Pakiet_dbplyr"
author: "RW"
date: "12 02 2020"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

**PAKIET dbplyr**
Pakiet służy do łączenia się z bazami danych

1. Instalowanie pakietu: "dbplyr" jest to część składowa pakietu TidyVerse, instalując TidyVerse dostajemy w pakiecie również dbplyr
```{r}
install.packages("dplyr")
installed.packages("dplyr") # Sprawdzanie czy danych pakiet został zainstalowany
library("dplyr")

# Sprawdzanie co zostało zainstalowane
search()
```

2. Wczytanie pakietu testowego ze zbiorem danych
```{r}
# install.packages("pscl")
library("pscl")
View(presidentialElections)
```


3. Funkcja SELECT - umożliwia pobieranie wybranych kolumn z ramki danych
```{r}
# Pobieranie kolumn year i demVotes (procent głosów oddanych na Demokratów)
# z ramki danych presidentialElections.
votes <- select(presidentialElections, year, demVote)
print(votes)

# Pobieranie kolumn na podstawie nazw (czyli podstawowej składni języka R).
votes <- presidentialElections[, c ("year", "demVote")]

# Pobieranie kolumn od state do year (czyli state, demVote i year).
select(presidentialElections, state:year)

# Pobieranie wszystkich kolumn oprócz south.
select(presidentialElections, -south)

```

4. Filtrowanie danych funkcja: filter()

```{r}
# Pobieranie wszystkich wierszy dotyczących wyborów z 2008 r.
votes_2008 <- filter(presidentialElections, year == 2008)
votes_2008
```

5. Filtrowanie z większą liczbą warunków
```{r}
votes_colorado_2008 <- filter(
  presidentialElections,
  year == 2008,
  state == "Colorado")

votes_colorado_2008
```

6. Funkcja: mutate() - dodaje dodatkowe kolumny do ramki danych
```{r}
# Dodawanie kolumny other_parties_vote z procentem głosów
# oddanych na inne partie.
# Dodawanie kolumny abs_vote_difference z wartością bezwzględną
# określającą różnicę między wartościami procentowymi.
# Warto zauważyć, że tych kolumn można użyć już w tworzącej je instrukcji.
presidentialElections <- mutate(
  presidentialElections,
  other_parties_vote = 100 - demVote, # Głosy na inne partie 
  abs_vote_difference = abs(demVote - other_parties_vote)
)

# umożliwia zmianę kolumn - rename()

```


7. Sortowane danych: Funkcja arrange()

```{r}
# Sortowanie wierszy malejąco według kolumny year, a następnie
# w ramach każdego roku według kolumny demVote.
presidentialElections <- arrange(presidentialElections, -year, demVote)

presidentialElections

```


8. Tworzenie podsumowań - Funkcja summariaze()
```{r}
# Obliczanie statystyk dla ramki danych presidentialElections.
average_votes <- summarize(
  presidentialElections,
  mean_dem_vote = mean(demVote),
  mean_other_parties = mean(other_parties_vote)
  )

average_votes
```

Funkcja summarize() zwraca ramkę danych ze zagregowanymi wartościami

9. Wykonywanie operacji sekwencyjnych
```{r}
# Używanie sekwencji kroków do znalezienia stanu z największą
# wartością kolumny demVote dla 2008 r.

# 1. Filtrowanie danych w celu uzyskania tylko obserwacji z 2008 r.
votes_2008 <- filter(presidentialElections, year == 2008)

# 2. Filtrowanie danych w celu otrzymania stanu o najwyższej wartości demVote.
most_dem_votes <- filter(votes_2008, demVote == max(demVote))

# 3. Pobieranie nazwy tego stanu.
most_dem_state <- select(most_dem_votes, state)
most_dem_state
```

10. Operatory potoku: %>% czyli przekazyanie wyniku poprzedniej operacji dalej (przekazywanie potokowe, łańcuchowe), element pakietu dplyr (ale sam operator pochodzi z pakietu: magritt)
```{r}
# Zadawanie tego samego pytania o dane z użyciem operatora potoku.
most_dem_state <- presidentialElections %>% # Pierwotna ramka danych.
  filter(year == 2008) %>% # 1. Filtrowanie, aby uzyskać głosy z 2008 r.
  filter(demVote == max(demVote)) %>% # 2. Filtrowanie, aby uzyskać stan o największej wartości demVote.
  select(state) # 3. Pobieranie nazwy stanu

most_dem_state
```

11. Grupowanie ramek danych, zwracana ramka to typ: ramka tibble
```{r}
# Tworznie grup na podstawie jakieś zmiennej w tym przypadku: STATE
grouped <- group_by(presidentialElections, state)
print(grouped)

```

12. Grupowanie za pomocą operatorów potoku
```{r}
# Obliczanie statystyk podsumowujących dla stanów — średnie wartości procentowe z wielu lat.
state_voting_summary <- presidentialElections %>%
  group_by(state) %>%
    summarize(
      mean_dem_vote = mean(demVote),
      mean_other_parties = mean(other_parties_vote))

# Przekształcanie ramki tibble na zwykłą ramkę danych
state_voting_summary <- as.data.frame(state_voting_summary)
state_voting_summary
```


13.0 Pakiet: dplyr w praktyce - analizowanie danych na temat lotów
```{r}
# Wczytywanie pakietu nycflights13 w celu uzyskania dostępu do ramki danych flights.
install.packages("nycflights13") # Raz w każdym komputerze.
library("nycflights13") # W każdym skrypcie.
```

13.1 Zrozumienie zbioru danych
```{r}
# Zapoznawanie się ze zbiorem danych flights.
?flights # Wyświetlanie dostępnej dokumentacji.
dim(flights) # Sprawdzanie liczby wierszy i kolumn.
colnames(flights) # Sprawdzanie nazw kolumn.
View(flights) # Wyświetlanie ramki danych w przeglądarce w środowisku RStudio.
```

```{r}
# Znajdowanie linii lotniczych (carrier) z największą liczbą
# opóźnionych lotów.
library("dplyr")

has_most_delays <- flights %>% # Zaczynamy od ramki danych fligths.
  group_by(carrier) %>% # Grupowanie według linii lotniczych (carrier).
  filter(dep_delay > 0) %>% # Wyszukiwanie samych opóźnień.
  summarize(num_delay = n()) %>% # Zliczanie obserwacji.
  filter(num_delay == max(num_delay)) %>% # Znajdowanie grupy z największą liczbą obserwacji.
  select(carrier) # Pobieranie nazwy linii lotniczych.

has_most_delays
# Otrzymywanie jednego skrótu: UA     
```

```{r}
# Rozpoznawanie co ten skrót z poprzedniej analizy oznacza
print(airlines)

most_delayed_name <- has_most_delays %>% # Rozpoczynanie od uzyskanej wcześniej odpowiedzi.
  left_join(airlines, by = "carrier") %>% # Złączanie na podstawie        identyfikatora linii.
  
select(name) # Pobieranie nazwy linii lotniczych.

print(most_delayed_name$name) # Dostęp do wartości z ramki tibble.
# [1] "United Air Lines Inc."
```

```{r}
# Obliczanie średniego opóźnienia przylotów (arr_delay)
# dla każdego docelowego lotniska (dest).
most_early <- flights %>%
  group_by(dest) %>% # Grupowanie na podstawie docelowego lotniska.
  summarize(delay = mean(arr_delay)) # Obliczanie średniego opóźnienia.

most_early
```

```{r}
# Obliczanie średniego opóźnienia dla docelowych lotnisk z pominięciem wyników NA.
most_early <- flights %>%
  group_by(dest) %>% # Grupowanie według docelowych lotnisk.
  summarize(delay = mean(arr_delay, na.rm = TRUE)) # Obliczanie           średniego opóźnienia.

most_early
```

```{r}
# Identyfikowanie lokalizacji, gdzie loty średnio docierają najwcześniej względem planu.
most_early <- flights %>%
  group_by(dest) %>% # Grupowanie według lokalizacji docelowej.
  summarize(delay = mean(arr_delay, na.rm = TRUE)) %>% # Obliczanie       średniego opóźnienia.
  filter(delay == min(delay, na.rm = TRUE)) %>% # Filtrowanie pod kątem   najmniejszego opóźnienia.
  select(dest, delay) %>% # Pobieranie lokalizacji docelowej  (i           opóźnienia w celu zapisania go).
  left_join(airports, by = c("dest" = "faa")) %>% # Złączanie z ramką     danych airports.
  select(dest, name, delay) # Pobieranie szukanych zmiennych        wyjściowych.

most_early
# Ramka tibble o wymiarach 1 na 3.
# dest name delay
# <chr> <chr> <dbl>
# 1 LEX Blue Grass -22
```

```{r}
# Identyfikowanie miesiąca, w którym loty mają zwykle największe opóźnienia.
flights %>%
  group_by(month) %>% # Grupowanie na podstawie odpowiedniego atrybutu.
  summarize(delay = mean(arr_delay, na.rm = TRUE)) %>% # Podsumowanie na   podstawie opóźnień.
  filter(delay == max(delay)) %>% # Filtrowanie pod kątem szukanego       rekordu.
  select(month) %>% # Pobieranie kolumny z odpowiedzią na pytanie.
  
print() # Bezpośrednie wyświetlanie ramki tibble.
# A tibble: 1 x 1.
# month
# <int>
# 1 7
```

```{r}
# Obliczanie opóźnień według miesięcy i dodawanie nazw miesięcy na potrzeby wizualnej prezentacji wyników.
# Zauważ, że month.name to zmienna wbudowana w języku R.
delay_by_month <- flights %>%
  group_by(month) %>%
  summarize(delay = mean(arr_delay, na.rm = TRUE)) %>%
  select(delay) %>%
  mutate(month = month.name)

delay_by_month
```

```{r}
# Tworzenie wykresu za pomocą pakietu ggplot2
library(ggplot2)

ggplot(data = delay_by_month) +
  geom_point(mapping = aes(x = delay, y = month)
             ,color = "blue"
             ,alpha = .4
             ,size = 3) +
  geom_vline(xintercept = 0, size = .25) +
  xlim(c(-20, 20)) +
  scale_y_discrete(limits = rev(month.name)) +
  labs(title = "Średnie opóźnienie w poszczególnych miesiącach",
  y = "", x = "Opóźnienie (w minutach)")
```



