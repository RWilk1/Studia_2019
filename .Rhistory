# Dodawanie czwartej ceny.
prices[4] <- 32
print(prices)
# Tworzenie wektora prices.
prices <- c(25, 28, 30)
# Modyfikacja pierwszej ceny na 20.
prices[1] <- 20
print(prices)
# Tworzenie wektora prices.
prices <- c(25, 28, 30)
# Dodawanie czwartej ceny.
prices[4] <- 32
print(prices)
# Przypisywanie wartości 60 do szóstego elementu wektora.
prices[6] <- 60
print(prices)
# Tworzenie wektora z przyborami szkolnymi.
school_supplies <- c("Plecak", "Laptop", "Długopis")
# Zastępowanie wartości "Laptop" słowem "Tablet" i wartości "Długopis" słowem "Ołówek".
school_supplies[c(2, 3)] <- c("Tablet", "Ołówek")
print(school_supplies)
# Tworzenie wektora z przyborami szkolnymi.
school_supplies <- c("Plecak", "Laptop", "Długopis")
print(school_supplies)
# Zastępowanie wartości "Laptop" słowem "Tablet" i wartości "Długopis" słowem "Ołówek".
school_supplies[c(2, 3)] <- c("Tablet", "Ołówek")
print(school_supplies)
# Używanie funkcji c() do utworzenia nowego wektora.
people <- c("Sara", "Alan", "Zenon")
# Używanie funkcji c() do złączenia wektora people z imieniem "Jacek".
more_people <- c(people, "Jacek")
print(more_people)
# Tworzenie wektora prices.
prices <- c(25, 28, 30)
# Modyfikacja pierwszej ceny na 20.
prices[1] <- 20
print(prices)
# Tworzenie wektora prices.
prices <- c(25, 28, 30)
# Dodawanie czwartej ceny.
prices[4] <- 32
print(prices)
# Przypisywanie wartości 60 do szóstego elementu wektora.
prices[6] <- 60
print(prices)
# Zastępowanie wszystkich wartości większych niż 10 liczbą 10.
v1 <- c(1, 5, 55, 1, 3, 11, 4, 27)
v1[v1 > 10] <- 10
print(v2)
# Tworzenie wektora prices.
prices <- c(25, 28, 30)
# Modyfikacja pierwszej ceny na 20.
prices[1] <- 20
print(prices)
# Tworzenie wektora prices.
prices <- c(25, 28, 30)
# Dodawanie czwartej ceny.
prices[4] <- 32
print(prices)
# Przypisywanie wartości 60 do szóstego elementu wektora.
prices[6] <- 60
print(prices)
# Zastępowanie wszystkich wartości większych niż 10 liczbą 10.
v1 <- c(1, 5, 55, 1, 3, 11, 4, 27)
v1[v1 > 10] <- 10
print(v1)
person <- list(
first_name = "Ada",
job = "Programistka",
salary = 78000,
in_union = TRUE
print(person)
)
person <- list(
first_name = "Ada",
job = "Programistka",
salary = 78000,
in_union = TRUE)
print(person)
person <- list(
first_name = "Ada",
job = "Programistka",
salary = 78000,
in_union = TRUE)
print(person)
names(person)
# Tworzenie listy person zawierającej listę ulubionych rzeczy.
person <- list(
first_name = "Ada",
job = "Programistka",
salary = 78000,
in_union = TRUE,
favorites = list(
music = "jazz",
food = "pizza"))
print(person)
# Tworzenie listy person.
person <- list(
first_name = "Ada",
job = "Programistka",
salary = 78000,
in_union = TRUE)
# Wskazywanie elementów o określonych etykietach z listy person.
person$first_name # [1] "Ada"
person$salary # [1] 78000
# Tworzenie listy person.
person <- list(
first_name = "Ada",
job = "Programistka",
salary = 78000,
in_union = TRUE)
# Wskazywanie elementów o określonych etykietach z listy person.
person$first_name # [1] "Ada"
person$salary # [1] 78000
# Można uzyskać dostęp za pomocą indeksu liczbowego, trzeba indeks otoczyć [[]]
person[[1]]
person[[2]]
person[[5]]
# Tworzenie listy person.
person <- list(
first_name = "Ada",
job = "Programistka",
salary = 78000,
in_union = TRUE)
# Wskazywanie elementów o określonych etykietach z listy person.
person$first_name # [1] "Ada"
person$salary # [1] 78000
# Można uzyskać dostęp za pomocą indeksu liczbowego, trzeba indeks otoczyć [[]]
person[[1]]
person[[2]]
person[[4]]
# Tworzenie listy person.
person <- list(
first_name = "Ada",
job = "Programistka",
salary = 78000,
in_union = TRUE)
# Wskazywanie elementów o określonych etykietach z listy person.
person$first_name # [1] "Ada"
person$salary # [1] 78000
# Można uzyskać dostęp za pomocą indeksu liczbowego, trzeba indeks otoczyć [[]]
person[[1]]
person[[2]]
person[["salary"]]
# Tworzenie listy person zawierającej listę ulubionych rzeczy.
person <- list(
first_name = "Ada",
job = "Programistka",
salary = 78000,
in_union = TRUE,
favorites = list(
music = "jazz",
food = "pizza"))
print(person)
person$favorites$music
# Tworzenie listy person.
person <- list(
first_name = "Ada",
job = "Programistka",
salary = 78000,
in_union = TRUE)
# Obecnie element age nie istnieje (ma wartość NULL).
person$age # NULL
# Przypisywanie wartości do (nowej) etykiety age.
person$age <- 40
person$age # [1] 40
# Ponowne przypisywanie wartości do elementu job na liście.
person$job <- "Starsza programistka" # Awans!
print(person$job)
# [1] "Starsza programistka"
# Ponowne przypisywanie wartości do elementu salary (z wykorzystaniem bieżącej wartości).
person$salary <- person$salary * 1.15 # 15 procent podwyżki!
print(person$salary)
# Sprawdzanie, czy zwracana wartość to lista
is.list(person["first_name"])
# [1] 89700
# Usuwanie etykiety first_name, aby dana osoba była anonimowa.
person$first_name <- NULL
# Tworzenie listy person.
person <- list(
first_name = "Ada",
job = "Programistka",
salary = 78000,
in_union = TRUE)
# Obecnie element age nie istnieje (ma wartość NULL).
person$age # NULL
# Przypisywanie wartości do (nowej) etykiety age.
person$age <- 40
person$age # [1] 40
# Ponowne przypisywanie wartości do elementu job na liście.
person$job <- "Starsza programistka" # Awans!
print(person$job)
# [1] "Starsza programistka"
# Ponowne przypisywanie wartości do elementu salary (z wykorzystaniem bieżącej wartości).
person$salary <- person$salary * 1.15 # 15 procent podwyżki!
print(person$salary)
# Sprawdzanie, czy zwracana wartość to lista
is.list(person[["first_name"]])
# [1] 89700
# Usuwanie etykiety first_name, aby dana osoba była anonimowa.
person$first_name <- NULL
# Tworzenie listy person.
person <- list(
first_name = "Ada",
job = "Programistka",
salary = 78000,
in_union = TRUE)
# Obecnie element age nie istnieje (ma wartość NULL).
person$age # NULL
# Przypisywanie wartości do (nowej) etykiety age.
person$age <- 40
person$age # [1] 40
# Ponowne przypisywanie wartości do elementu job na liście.
person$job <- "Starsza programistka" # Awans!
print(person$job)
# [1] "Starsza programistka"
# Ponowne przypisywanie wartości do elementu salary (z wykorzystaniem bieżącej wartości).
person$salary <- person$salary * 1.15 # 15 procent podwyżki!
print(person$salary)
# Usuwanie etykiety first_name, aby dana osoba była anonimowa.
person$first_name <- NULL
# Sprawdzanie, czy zwracana wartość to lista
is.list(person[["first_name"]])
knitr::opts_chunk$set(echo = TRUE)
# Tworzenie ramki danych w wyniku przekazania wektora do funkcji data.frame().
# Wektor imion.
name <- c("Ada", "Bartek", "Cyryl", "Daria", "Ela")
# Wektor wysokości.
height <- c(64, 74, 69, 69, 71)
# Wektor wagi.
weight <- c(135, 156, 139, 144, 152)
# Łączenie wektorów w ramkę danych.
# Zauważ, że nazwy zmiennych stają się nazwami kolumn.
people <- data.frame(name, height, weight, stringsAsFactors = FALSE)
# Tworzenie ramki danych w wyniku przekazania wektora do funkcji data.frame().
# Wektor imion.
name <- c("Ada", "Bartek", "Cyryl", "Daria", "Ela")
# Wektor wysokości.
height <- c(64, 74, 69, 69, 71)
# Wektor wagi.
weight <- c(135, 156, 139, 144, 152)
# Łączenie wektorów w ramkę danych.
# Zauważ, że nazwy zmiennych stają się nazwami kolumn.
people <- data.frame(name, height, weight, stringsAsFactors = FALSE)
people
# Tworzenie ramki danych w wyniku przekazania wektora do funkcji data.frame().
# Wektor imion.
name <- c("Ada", "Bartek", "Cyryl", "Daria", "Ela")
# Wektor wysokości.
height <- c(64, 74, 69, 69, 71)
# Wektor wagi.
weight <- c(135, 156, 139, 144, 152)
# Łączenie wektorów w ramkę danych.
# Zauważ, że nazwy zmiennych stają się nazwami kolumn.
people <- data.frame(name, height, weight, stringsAsFactors = FALSE)
print(people)
# Tworzenie ramki danych z imionami, wagami i wzrostami.
# Podawane są tu używane nazwy kolumn.
people <- data.frame(
name = c("Ada", "Bartek", "Cyryl", "Daria", "Ela"),
height = c(64, 74, 69, 69, 71),
weight = c(135, 156, 139, 144, 152)
people
# Tworzenie ramki danych z imionami, wagami i wzrostami.
# Podawane są tu używane nazwy kolumn.
people <- data.frame(
name = c("Ada", "Bartek", "Cyryl", "Daria", "Ela"),
height = c(64, 74, 69, 69, 71),
weight = c(135, 156, 139, 144, 152))
people
# Tworzenie ramki danych z imionami, wagami i wzrostami.
# Podawane są tu używane nazwy kolumn.
people <- data.frame(
name = c("Ada", "Bartek", "Cyryl", "Daria", "Ela"),
height = c(64, 74, 69, 69, 71),
weight = c(135, 156, 139, 144, 152))
people
# Odwoływanie się do poszczególnych elementów Data Frame-u
# Pobieranie kolumny weight (jako elementu listy); ta instrukcja zwraca wektor.
people_weights <- people$weight
people_weights
# Pobieranie kolumny height (jako elementu listy); ta instrukcja zwraca wektor.
people_heights <- people[["height"]]
people_heights
people <- data.frame(
name = c("Ada", "Bartek", "Cyryl", "Daria", "Ela"),
height = c(64, 74, 69, 69, 71),
weight = c(135, 156, 139, 144, 152))
nrow(ramka_danych) #Zwraca liczbę wierszy w ramce danych.
ncol(ramka_danych) #Zwraca liczbę kolumn w ramce danych.
dim(ramka_danych)  #Zwraca wymiary ramek danych (wierszy i kolumn)
colnames(ramka_danych) #wraca nazwy kolumn w ramce danych.
rownames(ramka_danych) #Zwraca nazwy wierszy w ramce danych.
head(ramka_danych) #Zwraca kilka pierwszych wierszy ramki danych (jako nową ramkę).
tail(ramka_danych) #Zwraca kilka ostatnich wierszy ramki danych (jako nową ramkę).
View(ramka_danych) # Otwiera ramkę danych w oknie podobnym do arkusza
#kalkulacyjnego (tylko w środowisku RStudio).
people <- data.frame(
name = c("Ada", "Bartek", "Cyryl", "Daria", "Ela"),
height = c(64, 74, 69, 69, 71),
weight = c(135, 156, 139, 144, 152))
nrow(people) #Zwraca liczbę wierszy w ramce danych.
ncol(people) #Zwraca liczbę kolumn w ramce danych.
dim(people)  #Zwraca wymiary ramek danych (wierszy i kolumn)
colnames(people) #wraca nazwy kolumn w ramce danych.
rownames(people) #Zwraca nazwy wierszy w ramce danych.
head(people) #Zwraca kilka pierwszych wierszy ramki danych (jako nową ramkę).
tail(people) #Zwraca kilka ostatnich wierszy ramki danych (jako nową ramkę).
View(people) # Otwiera ramkę danych w oknie podobnym do arkusza
#kalkulacyjnego (tylko w środowisku RStudio).
people <- data.frame(
name = c("Ada", "Bartek", "Cyryl", "Daria", "Ela"),
height = c(64, 74, 69, 69, 71),
weight = c(135, 156, 139, 144, 152))
my_df[row_name=2, col_num=3]
people <- data.frame(
name = c("Ada", "Bartek", "Cyryl", "Daria", "Ela"),
height = c(64, 74, 69, 69, 71),
weight = c(135, 156, 139, 144, 152))
people[row_name=2, col_num=3]
people <- data.frame(
name = c("Ada", "Bartek", "Cyryl", "Daria", "Ela"),
height = c(64, 74, 69, 69, 71),
weight = c(135, 156, 139, 144, 152))
people[2, 3]
people <- data.frame(
name = c("Ada", "Bartek", "Cyryl", "Daria", "Ela"),
height = c(64, 74, 69, 69, 71),
weight = c(135, 156, 139, 144, 152))
people[2, 3] # numer wiersza i numer kolumny
people[2, "height"]
people <- data.frame(
name = c("Ada", "Bartek", "Cyryl", "Daria", "Ela"),
height = c(64, 74, 69, 69, 71),
weight = c(135, 156, 139, 144, 152))
people[2, 3] # numer wiersza i numer kolumny
people[2, "height"]
people[,"height"] # wszystkie wiersze z kolumny height
# Przypisywanie zestawu nazw wierszy do wektora.
# Używane są tu wartości z kolumny name.
rownames(people) <- people$name
people <- data.frame(
name = c("Ada", "Bartek", "Cyryl", "Daria", "Ela"),
height = c(64, 74, 69, 69, 71),
weight = c(135, 156, 139, 144, 152))
people[2, 3] # numer wiersza i numer kolumny
people[2, "height"]
people[,"height"] # wszystkie wiersze z kolumny height
# Przypisywanie zestawu nazw wierszy do wektora.
# Używane są tu wartości z kolumny name.
rownames(people) <- people$name
rownames
people <- data.frame(
name = c("Ada", "Bartek", "Cyryl", "Daria", "Ela"),
height = c(64, 74, 69, 69, 71),
weight = c(135, 156, 139, 144, 152))
people[2, 3] # numer wiersza i numer kolumny
people[2, "height"]
people[,"height"] # wszystkie wiersze z kolumny height
# Przypisywanie zestawu nazw wierszy do wektora.
# Używane są tu wartości z kolumny name.
rownames(people) <- people$name
people <- data.frame(
name = c("Ada", "Bartek", "Cyryl", "Daria", "Ela"),
height = c(64, 74, 69, 69, 71),
weight = c(135, 156, 139, 144, 152))
people[2, 3] # numer wiersza i numer kolumny
people[2, "height"]
people[,"height"] # wszystkie wiersze z kolumny height
# Przypisywanie zestawu nazw wierszy do wektora.
# Używane są tu wartości z kolumny name.
rownames(people) <- people$name
people <- data.frame(
name = c("Ada", "Bartek", "Cyryl", "Daria", "Ela"),
height = c(64, 74, 69, 69, 71),
weight = c(135, 156, 139, 144, 152))
people[2, 3] # numer wiersza i numer kolumny
people[2, "height"]
people[,"height"] # wszystkie wiersze z kolumny height
# Przypisywanie zestawu nazw wierszy do wektora.
# Używane są tu wartości z kolumny name.
rownames(people) <- people$name
# Pobieranie wiersza z imieniem "Ada" (i wszystkich kolumn).
people["Ada", ] # Zwróć uwagę na oznaczający wszystkie kolumny przecinek.
people <- data.frame(
name = c("Ada", "Bartek", "Cyryl", "Daria", "Ela"),
height = c(64, 74, 69, 69, 71),
weight = c(135, 156, 139, 144, 152))
people[2, 3] # numer wiersza i numer kolumny
people[2, "height"]
people[,"height"] # wszystkie wiersze z kolumny height
# Przypisywanie zestawu nazw wierszy do wektora.
# Używane są tu wartości z kolumny name.
rownames(people) <- people$name
# Pobieranie wiersza z imieniem "Ada" (i wszystkich kolumn).
people["Ada", ] # Zwróć uwagę na oznaczający wszystkie kolumny przecinek.
# Pobieranie drugiej kolumny jako ramki danych (filtrowanie).
people["height"] # Bez przecinka - zwracana jest ramka danych.
people <- data.frame(
name = c("Ada", "Bartek", "Cyryl", "Daria", "Ela"),
height = c(64, 74, 69, 69, 71),
weight = c(135, 156, 139, 144, 152))
people[2, 3] # numer wiersza i numer kolumny
people[2, "height"]
people[,"height"] # wszystkie wiersze z kolumny height
# Przypisywanie zestawu nazw wierszy do wektora.
# Używane są tu wartości z kolumny name.
rownames(people) <- people$name
# Pobieranie wiersza z imieniem "Ada" (i wszystkich kolumn).
people["Ada", ] # Zwróć uwagę na oznaczający wszystkie kolumny przecinek.
# Pobieranie drugiej kolumny jako ramki danych (filtrowanie).
people["height"] # Bez przecinka - zwracana jest ramka danych.
# Pobieranie kolumn height i weight.
people[, c("height", "weight")] # Zwróć uwagę na przecinek oznaczający wszystkie wiersze.
people <- data.frame(
name = c("Ada", "Bartek", "Cyryl", "Daria", "Ela"),
height = c(64, 74, 69, 69, 71),
weight = c(135, 156, 139, 144, 152))
people[2, 3] # numer wiersza i numer kolumny
people[2, "height"]
people[,"height"] # wszystkie wiersze z kolumny height
# Przypisywanie zestawu nazw wierszy do wektora.
# Używane są tu wartości z kolumny name.
rownames(people) <- people$name
# Pobieranie wiersza z imieniem "Ada" (i wszystkich kolumn).
people["Ada", ] # Zwróć uwagę na oznaczający wszystkie kolumny przecinek.
# Pobieranie drugiej kolumny jako ramki danych (filtrowanie).
people["height"] # Bez przecinka - zwracana jest ramka danych.
# Pobieranie kolumn height i weight.
people[, c("height", "weight")] # Zwróć uwagę na przecinek oznaczający wszystkie wiersze.
# Pobieranie wierszy od drugiego do czwartego.
people[2:4, ] # Zwróć uwagę na przecinek oznaczający wszystkie kolumny.
people <- data.frame(
name = c("Ada", "Bartek", "Cyryl", "Daria", "Ela"),
height = c(64, 74, 69, 69, 71),
weight = c(135, 156, 139, 144, 152))
people[2, 3] # numer wiersza i numer kolumny
people[2, "height"]
people[,"height"] # wszystkie wiersze z kolumny height
# Przypisywanie zestawu nazw wierszy do wektora.
# Używane są tu wartości z kolumny name.
rownames(people) <- people$name
# Pobieranie wiersza z imieniem "Ada" (i wszystkich kolumn).
people["Ada", ] # Zwróć uwagę na oznaczający wszystkie kolumny przecinek.
# Pobieranie drugiej kolumny jako ramki danych (filtrowanie).
people["height"] # Bez przecinka - zwracana jest ramka danych.
# Pobieranie kolumn height i weight.
people[, c("height", "weight")] # Zwróć uwagę na przecinek oznaczający wszystkie wiersze.
# Pobieranie wierszy od drugiego do czwartego.
people[2:4, ] # Zwróć uwagę na przecinek oznaczający wszystkie kolumny.
# Pobieranie wierszy (z wszystkimi kolumnami), w których people$height ma wartość ponad 70.
people[people$height > 70, ] # Zwraca wiersze, w których height ma wartość ponad 70.
people <- data.frame(
name = c("Ada", "Bartek", "Cyryl", "Daria", "Ela"),
height = c(64, 74, 69, 69, 71),
weight = c(135, 156, 139, 144, 152))
people[2, 3] # numer wiersza i numer kolumny
people[2, "height"]
people[,"height"] # wszystkie wiersze z kolumny height
# Przypisywanie zestawu nazw wierszy do wektora.
# Używane są tu wartości z kolumny name.
rownames(people) <- people$name
# Pobieranie wiersza z imieniem "Ada" (i wszystkich kolumn).
people["Ada", ] # Zwróć uwagę na oznaczający wszystkie kolumny przecinek.
# Pobieranie drugiej kolumny jako ramki danych (filtrowanie).
people["height"] # Bez przecinka - zwracana jest ramka danych.
# Pobieranie kolumn height i weight.
people[, c("height", "weight")] # Zwróć uwagę na przecinek oznaczający wszystkie wiersze.
# Pobieranie wierszy od drugiego do czwartego.
people[2:4, ] # Zwróć uwagę na przecinek oznaczający wszystkie kolumny.
# Pobieranie wierszy (z wszystkimi kolumnami), w których people$height ma wartość ponad 70.
people[people$height > 70, ] # Zwraca wiersze, w których height ma wartość ponad 70.
# Funkcja sprawdza czy obiekt jest ramką danych
is.data.frame(people)
# Funkcja zmienająca obiekt na ramkę danych
as.data.frame(people)
knitr::opts_chunk$set(echo = TRUE)
# Wczytywanie danych z pliku my_file.csv do ramki danych my_df.
my_df <- read.csv("R_plik_CSV.csv", stringsAsFactors = FALSE)
# Wczytywanie danych z pliku my_file.csv do ramki danych my_df.
my_df <- read.csv("R_plik_CSV.csv", stringsAsFactors = FALSE)
people <- data.frame(
name = c("Ada", "Bartek", "Cyryl", "Daria", "Ela"),
height = c(64, 74, 69, 69, 71),
weight = c(135, 156, 139, 144, 152))
people[2, 3] # numer wiersza i numer kolumny
people[2, "height"]
people[,"height"] # wszystkie wiersze z kolumny height
# Przypisywanie zestawu nazw wierszy do wektora.
# Używane są tu wartości z kolumny name.
rownames(people) <- people$name
# Pobieranie wiersza z imieniem "Ada" (i wszystkich kolumn).
people["Ada", ] # Zwróć uwagę na oznaczający wszystkie kolumny przecinek.
# Pobieranie drugiej kolumny jako ramki danych (filtrowanie).
people["height"] # Bez przecinka - zwracana jest ramka danych.
# Pobieranie kolumn height i weight.
people[, c("height", "weight")] # Zwróć uwagę na przecinek oznaczający wszystkie wiersze.
# Pobieranie wierszy od drugiego do czwartego.
people[2:4, ] # Zwróć uwagę na przecinek oznaczający wszystkie kolumny.
# Pobieranie wierszy (z wszystkimi kolumnami), w których people$height ma wartość ponad 70.
people[people$height > 70, ] # Zwraca wiersze, w których height ma wartość ponad 70.
# Funkcja sprawdza czy obiekt jest ramką danych
is.data.frame(people)
# Funkcja zmienająca obiekt na ramkę danych
as.data.frame(people)
# Zapisywanie danych z ramki my_df w pliku my_new_file.csv.
# Argument row.names informuje, czy nazwy wierszy
# powinny zostać zapisane w pliku (zwykle nie).
write.csv(people, "my_new_file.csv", row.names = FALSE)
# Pobieranie ścieżki bezwzględnej prowadzącej do bieżącego katalogu roboczego.
getwd()
setwd("D:/OneDrive/Studia podyplomowe/Data_Scientist_Kraków/Uczenie Maszynowe - Praca zaliczeniowa/R_Project_Loans_Paid_Predictions/Projekt_Zaliczeniowy_Loans_Predictions")
