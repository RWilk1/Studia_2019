getdw()
getwd()
dir(getwd())
installed.packages()
help(install.packages())
help(install.packages())
help(install.packages)
install.packages(readxl)
library(readxl)
library(readxl)
dataset <- read_excel("LoanStats_DataSet.xlsx")
View(dataset)
View(dataset)
head(dataset)
colnames(dataset)
colnames(dataset)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
View(dataset)
print(dataset)
# Zapisywanie 3 w zmiennej
num_cups_coffee <- 3
# Zapisywanie 3.5 w zmiennej coffee_price.
coffee_price <- 3.5
# Łączne wydatki na kawę.
money_spent_on_coffee <- num_cups_coffee * coffee_price
print(money_spent_on_coffee)
# Zapisywanie 3 w zmiennej
num_cups_coffee <- 3
# Zapisywanie 3.5 w zmiennej coffee_price.
coffee_price <- 3.5
# Łączne wydatki na kawę.
money_spent_on_coffee <- num_cups_coffee * coffee_price
print(money_spent_on_coffee)
# Zapisywanie 3 w zmiennej
num_cups_coffee <- 3
# Zapisywanie 3.5 w zmiennej coffee_price.
coffee_price <- 3.5
# Łączne wydatki na kawę.
money_spent_on_coffee <- num_cups_coffee * coffee_price
print(money_spent_on_coffee)
knitr::opts_chunk$set(echo = TRUE)
second_in_a_year <- 365 * 24 * 60 * 60
second_in_a_year <- 365 * 24 * 60 * 60
pring(second_in_a_year)
second_in_a_year <- 365 * 24 * 60 * 60
print(second_in_a_year)
?sum
??sum
help(sum)
knitr::opts_chunk$set(echo = TRUE)
# Używanie funkcji seq() do tworzenia wektora liczb od 1 do 70 (włącznie).
one_to_seventy <- seq(1, 70)
print(one_to_seventy)
# Używanie funkcji seq() do tworzenia wektora liczb od 1 do 70 (włącznie).
one_to_seventy <- seq(1, 10)
print(one_to_seventy)
# Używanie funkcji seq() do tworzenia wektora liczb od 1 do 70 (włącznie).
one_to_seventy <- seq(1, 10)
print(one_to_seventy)
# Tworzenie wektora liczb od 1 do 10, przy czym dodawana jest tylko co druga liczba.
odds <- seq(1, 10, 2)
print(odds)
# Używanie funkcji seq() do tworzenia wektora liczb od 1 do 70 (włącznie).
one_to_seventy <- seq(1, 10)
print(one_to_seventy)
# Tworzenie wektora liczb od 1 do 10, przy czym dodawana jest tylko co druga liczba.
odds <- seq(1, 10, 2)
print(odds)
# Używanie operatora dwukropka (:) jako skrótowego wywołania funkcji seq().
one_to_seventy <- 1:70
v1 <- c(3,1,4,1,4)
v2 <- c(1,6,1,8,0)
v3 <- v1 + v2
v1 <- c(3,1,4,1,4)
v2 <- c(1,6,1,8,0)
v3 <- v1 + v2
pring(v1,v2,v3)
v1 <- c(3,1,4,1,4)
v2 <- c(1,6,1,8,0)
v3 <- v1 + v2
print(v1,v2,v3)
print
v1 <- c(3,1,4,1,4)
v2 <- c(1,6,1,8,0)
v3 <- v1 + v2
print(v1)
print(v2)
print(v3)
# Tworzenie dodawanych wektorów.
v1 <- c(1, 3, 5, 1, 5)
v2 <- c(1, 2)
# Dodawanie wektorów.
v3 <- v1 + v2 # Zwraca 2 5 6 3 6.
# Tworzenie dodawanych wektorów.
v1 <- c(1, 3, 5, 1, 5)
v2 <- c(1, 2)
# Dodawanie wektorów.
v3 <- v1 + v2 # Zwraca 2 5 6 3 6.
print(v3)
# Tworzenie dodawanych wektorów.
v1 <- c(1, 3, 5, 1, 5)
v2 <- c(1, 2)
# Dodawanie wektorów.
v3 <- v1 + v2 # Zwraca 2 5 6 3 6.
print(v3)
# Tworzenie dodawanych wektorów.
v1 <- c(1, 3, 5, 1, 5)
v2 <- c(1, 2)
# Dodawanie wektorów.
v3 <- v1 + v2 # Zwraca 2 5 6 3 6.
print(v3)
# Dodawanie jednej wartości do wektora.
v1 <- 1:5 # Tworzenie wektora liczb od 1 do 5.
result <- v1 + 4 # Dodawanie wartości skalarnej do wektora.
print(result)
# Potwierdzenie, że typy podstawowe są zapisywane jako wektory.
is.vector(18) # TRUE
is.vector("Witaj") # TRUE
is.vector(TRUE) # TRUE
# Tworzenie Vwektora liczb.
nums <- c(3.98, 8, 10.8, 3.27, 5.21)
# Wykonywanie operacji wektorowej.
rounded_nums <- round(nums, 1)
print(rounded_nums)
# Tworzy wektor introductions, a następnie zlicza
# znaki w każdym elemencie.
introductions <- c("Hej", "Witaj", "Cześć")
nchar(introductions)
# Tworzenie wektora people.
people <- c("Sara", "Alan", "Zenon")
# Dostęp do elementu o indeksie 1.
first_person <- people[1]
print(first_person)
vowels <- c("a", "e", "i", "o", "u")
# Zwracanie wszystkich elementów OPRÓCZ tego o indeksie 2.
all_but_e <- vowels[-2]
print(all_but_e)
# Tworzenie wektora colors.
colors <- c("czerwony", "zielony", "niebieski", "żółty", "fioletowy")
# Wektor indeksów elementów pobieranych z wektora colors.
indices <- c(1, 3, 4)
# Pobieranie kolorów o podanych indeksach.
extracted <- colors[indices]
print(extracted)
# Podawanie anonimowego wektora indeksów.
others <- colors[c(2, 5)]
print(others)
# Tworzenie wektora colors.
colors <- c("czerwony", "zielony", "niebieski", "żółty", "fioletowy")
# Wektor indeksów elementów pobieranych z wektora colors.
indices <- c(1, 3, 4)
# Pobieranie kolorów o podanych indeksach.
extracted <- colors[indices]
print(extracted)
# Podawanie anonimowego wektora indeksów.
others <- colors[c(2, 5)]
print(others)
# Pobieranie wartości z pozycji od 2 do 5.
print(colors[2:5])
# Tworzenie wektora z rozmiarami butów.
shoe_sizes <- c(5.5, 11, 7, 8, 4)
# Wektor wartości logicznych (do filtrowania wektora shoe_sizes).
filter <- c(TRUE, FALSE, FALSE, FALSE, TRUE)
# Pobieranie każdego elementu, na którego pozycji podano wartość TRUE.
print(shoe_sizes[filter])
# Tworzenie wektora z rozmiarami butów.
shoe_sizes <- c(5.5, 11, 7, 8, 4)
# Tworzenie wektora wartości logicznych określającego, czy rozmiar jest mniejszy niż 6.5.
shoe_is_small <- shoe_sizes < 6.5 # Zwraca T F F F T.
# Używanie wektora shoe_is_small do pobierania butów w małych rozmiarach.
small_shoes <- shoe_sizes[shoe_is_small] # Zwraca 5.5 4.
print(small_shoes)
# Tworzenie wektora z rozmiarami butów.
shoe_sizes <- c(5.5, 11, 7, 8, 4)
# Tworzenie wektora wartości logicznych określającego, czy rozmiar jest mniejszy niż 6.5.
shoe_is_small <- shoe_sizes < 6.5 # Zwraca T F F F T.
print(shoe_is_small)
# Używanie wektora shoe_is_small do pobierania butów w małych rozmiarach.
small_shoes <- shoe_sizes[shoe_is_small]
print(small_shoes)
# Tworzenie wektora z rozmiarami butów.
shoe_sizes <- c(5.5, 11, 7, 8, 4)
print(shoe_sizes)
# Tworzenie wektora wartości logicznych określającego, czy rozmiar jest mniejszy niż 6.5.
shoe_is_small <- shoe_sizes < 6.5 # Zwraca T F F F T.
print(shoe_is_small)
# Używanie wektora shoe_is_small do pobierania butów w małych rozmiarach.
small_shoes <- shoe_sizes[shoe_is_small]
print(small_shoes)
# Tworzenie wektora prices.
prices <- c(25, 28, 30)
# Modyfikacja pierwszej ceny na 20.
prices[1] <- 20
print(prices)
# Tworzenie wektora prices.
prices <- c(25, 28, 30)
# Modyfikacja pierwszej ceny na 20.
prices[1] <- 20
print(prices)
# Tworzenie wektora prices.
prices <- c(25, 28, 30)
# Dodawanie czwartej ceny.
prices[4] <- 32
print(prices)
# Tworzenie wektora prices.
prices <- c(25, 28, 30)
# Modyfikacja pierwszej ceny na 20.
prices[1] <- 20
print(prices)
# Tworzenie wektora prices.
prices <- c(25, 28, 30)
# Dodawanie czwartej ceny.
prices[4] <- 32
print(prices)
# Przypisywanie wartości 60 do szóstego elementu wektora.
prices[6] <- 60
print(prices)
# Tworzenie wektora z przyborami szkolnymi.
school_supplies <- c("Plecak", "Laptop", "Długopis")
# Zastępowanie wartości "Laptop" słowem "Tablet" i wartości "Długopis" słowem "Ołówek".
school_supplies[c(2, 3)] <- c("Tablet", "Ołówek")
print(school_supplies)
# Tworzenie wektora z przyborami szkolnymi.
school_supplies <- c("Plecak", "Laptop", "Długopis")
print(school_supplies)
# Zastępowanie wartości "Laptop" słowem "Tablet" i wartości "Długopis" słowem "Ołówek".
school_supplies[c(2, 3)] <- c("Tablet", "Ołówek")
print(school_supplies)
# Używanie funkcji c() do utworzenia nowego wektora.
people <- c("Sara", "Alan", "Zenon")
# Używanie funkcji c() do złączenia wektora people z imieniem "Jacek".
more_people <- c(people, "Jacek")
print(more_people)
# Tworzenie wektora prices.
prices <- c(25, 28, 30)
# Modyfikacja pierwszej ceny na 20.
prices[1] <- 20
print(prices)
# Tworzenie wektora prices.
prices <- c(25, 28, 30)
# Dodawanie czwartej ceny.
prices[4] <- 32
print(prices)
# Przypisywanie wartości 60 do szóstego elementu wektora.
prices[6] <- 60
print(prices)
# Zastępowanie wszystkich wartości większych niż 10 liczbą 10.
v1 <- c(1, 5, 55, 1, 3, 11, 4, 27)
v1[v1 > 10] <- 10
print(v2)
# Tworzenie wektora prices.
prices <- c(25, 28, 30)
# Modyfikacja pierwszej ceny na 20.
prices[1] <- 20
print(prices)
# Tworzenie wektora prices.
prices <- c(25, 28, 30)
# Dodawanie czwartej ceny.
prices[4] <- 32
print(prices)
# Przypisywanie wartości 60 do szóstego elementu wektora.
prices[6] <- 60
print(prices)
# Zastępowanie wszystkich wartości większych niż 10 liczbą 10.
v1 <- c(1, 5, 55, 1, 3, 11, 4, 27)
v1[v1 > 10] <- 10
print(v1)
person <- list(
first_name = "Ada",
job = "Programistka",
salary = 78000,
in_union = TRUE
print(person)
)
person <- list(
first_name = "Ada",
job = "Programistka",
salary = 78000,
in_union = TRUE)
print(person)
person <- list(
first_name = "Ada",
job = "Programistka",
salary = 78000,
in_union = TRUE)
print(person)
names(person)
# Tworzenie listy person zawierającej listę ulubionych rzeczy.
person <- list(
first_name = "Ada",
job = "Programistka",
salary = 78000,
in_union = TRUE,
favorites = list(
music = "jazz",
food = "pizza"))
print(person)
# Tworzenie listy person.
person <- list(
first_name = "Ada",
job = "Programistka",
salary = 78000,
in_union = TRUE)
# Wskazywanie elementów o określonych etykietach z listy person.
person$first_name # [1] "Ada"
person$salary # [1] 78000
# Tworzenie listy person.
person <- list(
first_name = "Ada",
job = "Programistka",
salary = 78000,
in_union = TRUE)
# Wskazywanie elementów o określonych etykietach z listy person.
person$first_name # [1] "Ada"
person$salary # [1] 78000
# Można uzyskać dostęp za pomocą indeksu liczbowego, trzeba indeks otoczyć [[]]
person[[1]]
person[[2]]
person[[5]]
# Tworzenie listy person.
person <- list(
first_name = "Ada",
job = "Programistka",
salary = 78000,
in_union = TRUE)
# Wskazywanie elementów o określonych etykietach z listy person.
person$first_name # [1] "Ada"
person$salary # [1] 78000
# Można uzyskać dostęp za pomocą indeksu liczbowego, trzeba indeks otoczyć [[]]
person[[1]]
person[[2]]
person[[4]]
# Tworzenie listy person.
person <- list(
first_name = "Ada",
job = "Programistka",
salary = 78000,
in_union = TRUE)
# Wskazywanie elementów o określonych etykietach z listy person.
person$first_name # [1] "Ada"
person$salary # [1] 78000
# Można uzyskać dostęp za pomocą indeksu liczbowego, trzeba indeks otoczyć [[]]
person[[1]]
person[[2]]
person[["salary"]]
# Tworzenie listy person zawierającej listę ulubionych rzeczy.
person <- list(
first_name = "Ada",
job = "Programistka",
salary = 78000,
in_union = TRUE,
favorites = list(
music = "jazz",
food = "pizza"))
print(person)
person$favorites$music
# Tworzenie listy person.
person <- list(
first_name = "Ada",
job = "Programistka",
salary = 78000,
in_union = TRUE)
# Obecnie element age nie istnieje (ma wartość NULL).
person$age # NULL
# Przypisywanie wartości do (nowej) etykiety age.
person$age <- 40
person$age # [1] 40
# Ponowne przypisywanie wartości do elementu job na liście.
person$job <- "Starsza programistka" # Awans!
print(person$job)
# [1] "Starsza programistka"
# Ponowne przypisywanie wartości do elementu salary (z wykorzystaniem bieżącej wartości).
person$salary <- person$salary * 1.15 # 15 procent podwyżki!
print(person$salary)
# Sprawdzanie, czy zwracana wartość to lista
is.list(person["first_name"])
# [1] 89700
# Usuwanie etykiety first_name, aby dana osoba była anonimowa.
person$first_name <- NULL
# Tworzenie listy person.
person <- list(
first_name = "Ada",
job = "Programistka",
salary = 78000,
in_union = TRUE)
# Obecnie element age nie istnieje (ma wartość NULL).
person$age # NULL
# Przypisywanie wartości do (nowej) etykiety age.
person$age <- 40
person$age # [1] 40
# Ponowne przypisywanie wartości do elementu job na liście.
person$job <- "Starsza programistka" # Awans!
print(person$job)
# [1] "Starsza programistka"
# Ponowne przypisywanie wartości do elementu salary (z wykorzystaniem bieżącej wartości).
person$salary <- person$salary * 1.15 # 15 procent podwyżki!
print(person$salary)
# Sprawdzanie, czy zwracana wartość to lista
is.list(person[["first_name"]])
# [1] 89700
# Usuwanie etykiety first_name, aby dana osoba była anonimowa.
person$first_name <- NULL
# Tworzenie listy person.
person <- list(
first_name = "Ada",
job = "Programistka",
salary = 78000,
in_union = TRUE)
# Obecnie element age nie istnieje (ma wartość NULL).
person$age # NULL
# Przypisywanie wartości do (nowej) etykiety age.
person$age <- 40
person$age # [1] 40
# Ponowne przypisywanie wartości do elementu job na liście.
person$job <- "Starsza programistka" # Awans!
print(person$job)
# [1] "Starsza programistka"
# Ponowne przypisywanie wartości do elementu salary (z wykorzystaniem bieżącej wartości).
person$salary <- person$salary * 1.15 # 15 procent podwyżki!
print(person$salary)
# Usuwanie etykiety first_name, aby dana osoba była anonimowa.
person$first_name <- NULL
# Sprawdzanie, czy zwracana wartość to lista
is.list(person[["first_name"]])
